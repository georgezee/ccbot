service: serverless-bolt-python
frameworkVersion: '2'
package:
  individually: true
  exclude:
    - "*/**"
provider:
  name: aws
  runtime: python3.8
  stage: dev
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }
  environment:
    SLACK_SIGNING_SECRET: ${env:SLACK_SIGNING_SECRET}
    SLACK_BOT_TOKEN: ${env:SLACK_BOT_TOKEN}
    CF_API_KEY: ${env:CF_API_KEY}
    USERS_TABLE: ${self:custom.tableName}
functions:
  slack:
    handler: app.handler
    events:
      - http:
          path: slack/events
          method: post
    package:
      include:
        - app.py
plugins:
  - serverless-python-requirements
  - serverless-offline
  - serverless-dynamodb-local
resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}
custom:
  tableName: 'users-table-${self:provider.stage}'
  pythonRequirements:
    dockerizePip: true
useDotenv: true